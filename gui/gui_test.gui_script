---========================---
---== LUA MODULE IMPORTS ==---
---========================---
local debugdraw = require "extensions.defold.debug-draw.debug-draw"
local defmath = require "extensions.defold.defmath.defmath"
local lume = require "extensions.external.lume.lume"
local gui_extra = require "extensions.defold.gui_extra.gui_extra"
local monarch = require "extensions.defold.monarch.monarch"
local rc = require "extensions.defold.rendercam.rendercam"
local csv = require "extensions.defold.csv-importer.csv-importer"
local gp = require "gamedata.runtime_values"

local druid = require("druid.druid")


---========================---
---== LOCAL VARIABLES ==---
---========================---

local scrolling_list_container, scrolling_list_content = "data_list_vertical", "data_list_vertical_content"
local btn_prefab, btn_frame, btn_frame_anim, btn_text, btn_icon, img_item_selected, txt_item_selected = "prefab", "frame", "btn_medium_", "text", "icon", "img_item_selected", "txt_item_name"
local list_nb_items_max, nb_sprites_max, data_list_nb_columns = 50, 20, 3


local function is_node_alive(node)
	local ok, err = pcall(gui.get_position, node)
	return ok
end

---========================---
---== LOCAL FUNCTIONS ==---
---========================---

local function create_function(self, data, index, data_list)

	-- init stuff for this node
	local nodes = gui.clone_tree(self.prefab)
	local root = nodes[btn_prefab]
	
	gui.set_enabled(root, true)
	--gui.set_enabled(nodes["checkbox"], data.is_checked)
	gui.set_text(nodes[btn_text], "Item " .. data.id)
		
	gui.play_flipbook(nodes[btn_frame], btn_frame_anim..self.data[data.id].state)

	-- button content creation & interactions
	local button = self.druid:new_button(root, function()

		self.scrolling_list_button_clicked = true -- a button has been clicked
		self.scrolling_list_button_clicked_id_old = self.scrolling_list_button_clicked_id -- we save the previously selected node id
		self.scrolling_list_button_clicked_id = data.id -- we keep track of the currently selected button id
		--print("Button clicked => "..self.scrolling_list_button_clicked_id)

		-- when created, we set the button state consistently (based on self.data table)
		-- 1 = unselected (default) / 2 = selected
		---[[--
		for i=1,#self.data do
			if i ~= self.scrolling_list_button_clicked_id then self.data[i].state = 1 end		
		end
		if self.scrolling_list_button_clicked_id > 0 then self.data[self.scrolling_list_button_clicked_id].state = 2 end
		--]]--

		-- button animation (based on state)
		data.state = self.data[self.scrolling_list_button_clicked_id].state
		data.node = nodes[btn_frame]
		gui.play_flipbook(data.node, btn_frame_anim..data.state)
		
	end)
	
	button:set_click_zone(data_list.scroll.view_node)
	
	return root, button
end


function init(self)

	-------================================
	----====== SCROLLING LIST PARAMETERS
	-------================================
	
	self.scrolling_list_button_clicked_id, self.scrolling_list_button_clicked_id_old, self.scrolling_list_button_clicked = 0, false


	-------================================
	----====== SCROLLING LIST CREATION
	-------================================
	
	self.druid = druid.new(self)

	self.prefab = gui.get_node(btn_prefab)
	gui.set_enabled(self.prefab, false)

	self.data = {}

	for i = 1, list_nb_items_max do
		table.insert(self.data, {
			id = i,
			state = 1,
			node = nil
		})
	end

	self.scroll = self.druid:new_scroll(scrolling_list_container, scrolling_list_content)
	self.scroll:set_horizontal_scroll(false)
	self.grid = self.druid:new_static_grid(scrolling_list_content, btn_prefab, data_list_nb_columns)
	self.data_list = self.druid:new_data_list(self.scroll, self.grid, create_function)
	self.data_list:set_data(self.data)

end


function final(self)
	self.druid:final()
end


function update(self, dt)
	self.druid:update(dt)

	-------================================
	----====== if a button is clicked, we update the button states (in the self.data table)
	--- and the visual
	-------------------------------------------------------
	-------================================
	
	if self.scrolling_list_button_clicked then

		-------------------------------------------------------
		-- we set the newly selected node state to 2 (selected)
		-- and update the animation (selected = yellow)
		if self.scrolling_list_button_clicked_id > 0 then
			local index = self.scrolling_list_button_clicked_id
			self.data[index].state = 2
			gui.play_flipbook(self.data[index].node, btn_frame_anim..self.data[index].state)
		end

		-------------------------------------------------------
		-- we set the previously selected node state to 1 (unselected)
		-- and update the animation (unselected = default)
		-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		-- NOTE: a "Deleted node" error message is displayed in the console if this node doesn't exist (= was deleted and not re-created yet)
		-- This is why I would need a "node delected" feedback, or anything else......
		-- !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!	
		
		if self.scrolling_list_button_clicked_id_old > 0 then
			local index = self.scrolling_list_button_clicked_id_old
			self.data[index].state = 1
			gui.play_flipbook(self.data[index].node, btn_frame_anim..self.data[index].state)
		end

		self.scrolling_list_button_clicked = false
		
	end

	
	-------================================
	----====== DEBUG
	-------================================

	for i=1,#self.data do
		--print("self.data[i].node = "..tostring(self.data[i].node))
		--local pouet = tostring(is_node_alive(nodes[btn_prefab]))
		--print("pouet")
	end

end


function on_message(self, message_id, message, sender)
	self.druid:on_message(message_id, message, sender)
end


function on_input(self, action_id, action)
	return self.druid:on_input(action_id, action)
end